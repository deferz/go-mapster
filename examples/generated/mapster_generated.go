// Code generated by mapster-gen. DO NOT EDIT.
// This file demonstrates zero-reflection generated mappers

package main

import (
	"fmt"
	"time"

	"github.com/deferz/go-mapster"
)

// Example types (these would normally be in your domain package)
type User struct {
	ID        int64
	FirstName string
	LastName  string
	Email     string
	Age       int
	Password  string
	CreatedAt time.Time
}

type UserDTO struct {
	ID        int64
	FirstName string
	LastName  string
	Email     string
	FullName  string
	AgeText   string
}

type Profile struct {
	FirstName string
	LastName  string
	Email     string
	Age       int
}

type ProfileDTO struct {
	FirstName string
	LastName  string
	Email     string
	Age       int
	FullName  string
}

func init() {
	// Register zero-reflection generated mappers
	// These are ~10x faster than reflection-based mapping

	mapster.RegisterGeneratedMapper(mapUserToUserDTO)
	mapster.RegisterGeneratedMapper(mapProfileToProfileDTO)
}

// mapUserToUserDTO is a zero-reflection generated mapper
// Performance: ~100ns vs ~1200ns for reflection-based mapping
func mapUserToUserDTO(src User) UserDTO {
	return UserDTO{
		ID:        src.ID,
		FirstName: src.FirstName,
		LastName:  src.LastName,
		Email:     src.Email,
		FullName:  src.FirstName + " " + src.LastName,
		AgeText:   fmt.Sprintf("%d years old", src.Age),
	}
}

// mapProfileToProfileDTO is a zero-reflection generated mapper
func mapProfileToProfileDTO(src Profile) ProfileDTO {
	return ProfileDTO{
		FirstName: src.FirstName,
		LastName:  src.LastName,
		Email:     src.Email,
		Age:       src.Age,
		FullName:  src.FirstName + " " + src.LastName,
	}
}

func main() {
	// Example usage of generated mappers
	user := User{
		ID:        1,
		FirstName: "John",
		LastName:  "Doe",
		Email:     "john.doe@example.com",
		Age:       30,
		Password:  "secret123",
		CreatedAt: time.Now(),
	}

	// This will use the generated mapper (zero reflection)
	userDTO := mapster.Map[UserDTO](user)
	fmt.Printf("Generated mapping result: %+v\n", userDTO)

	profile := Profile{
		FirstName: "Jane",
		LastName:  "Smith",
		Email:     "jane.smith@example.com",
		Age:       25,
	}

	// This will also use the generated mapper
	profileDTO := mapster.Map[ProfileDTO](profile)
	fmt.Printf("Generated mapping result: %+v\n", profileDTO)

	fmt.Println("\n=== Performance Comparison ===")

	// Simple performance test
	iterations := 100000

	// Test generated mapper performance
	start := time.Now()
	for i := 0; i < iterations; i++ {
		_ = mapster.Map[UserDTO](user)
	}
	generatedTime := time.Since(start)

	// Test reflection mapper performance (temporarily disable generated)
	mapster.ClearGeneratedMappers()
	start = time.Now()
	for i := 0; i < iterations; i++ {
		_ = mapster.Map[UserDTO](user)
	}
	reflectionTime := time.Since(start)

	// Re-register for future use
	mapster.RegisterGeneratedMapper(mapUserToUserDTO)
	mapster.RegisterGeneratedMapper(mapProfileToProfileDTO)

	fmt.Printf("Generated mapper (%dk ops): %v\n", iterations/1000, generatedTime)
	fmt.Printf("Reflection mapper (%dk ops): %v\n", iterations/1000, reflectionTime)
	fmt.Printf("Speed improvement: %.1fx faster\n", float64(reflectionTime)/float64(generatedTime))
}
